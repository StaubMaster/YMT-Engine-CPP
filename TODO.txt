
organize
	Instance stuff
		Simple3D is currently in Graphics/PH
		but does it even count as Graphics ?
		yes, it is used for Graphics,
		but if I make a slightly differnet
		for Physics, is it still for graphics or its own Category ?
	Data Attribute Uniform Multiform
		these are all related to Data types
		Attribute are not in the Folder structure as Data
		also Uniform and Multiform shadre files
		should probably split those
		so how should Data be organized ?
		they all have different names so putting them all in one Folder should be fine
		should the Uniforms start with Uni or just be put in a NameSpace called Uniform
		same with Multiform and Attribute
		same with Data but call the namespace DataStruct
	should UniformBase be in Shader ?
	and AttributeBase in Buffer ?
	it would mean that UniformBase would not be in the middle of implemenentations
	put the Base stuff in a seperate NameSpace ?
	so Uniform::Base:: or just a global Base::





optimize compilation
	foreward declaration
		<iosfwd> in header instead of <iostream>



Shaders:
Light
{
	Range ?
	LightBase
	{
		Color ?
		Intensity ?
	}

	Ambient
	{
		LightBase Base
	}

	Soler
	{
		LightBase Base
		Point3D Direction
	}
	Point
	{
		LightBase Base
		Point3D Position
		float falloff ?
	}
	Spot
	{
		LightBase Base
		Point3D Position
		Point3D Direction
		float angle
		float falloff ?
	}
}



Particle:
Physics Instance
{
	Point3D Position
	Point3D MoveVel

	Angle3D Rotation
	Angle3D SpinVel
}





Angle
right now Angle is just 3 Angles along with sin and cos
what to do with those values (foreward/backward) is decided by what uses it
the sin cos is stored because I think recalculating those thenever the Angle is used would be inefficient
so my Idea is
have a AngleBase class that stores the 3 Angles and a rotation matrix
it dosent calculate the matrix
then inherit AngleFore and AngleBack
these automatically calculate their appropriate matrix
no Idea how easy it is to rotate angles / invert angles is with this





rename Abstract to Data ?
is that less or more vague ?

should all the Data stuff be put into one Folder ?
instead of seperate by Dimension ?
also should the PointN be renamed to FloatN ?
same with IndexN and UndexN to IntN and UIntN ?
nah





MakeFile
currenly sucks
at home the Archives and Librarys are different
there is a way to make the MakeFile check those ?





there are also aparently a lot of things that openGL / glfw has already implemented
something about light, maybe projection stuff

but creating things myself gives me more freedom ?
	like with Depth, I like to use Relative Distance instead of DepthFactors
	since that means the same Depth when Spining
	although that might also be doable with Factors
	or at least outside the Fragment Shader





also maybe start working on the Projects
loading .obj should be simple compared to the .ymt I've already done

openCL dosent currently work because of the Links (on Mac)
but besides that I already have ComputeShaders and Instances
so that that done as well

Voxel I also already have but that Project needs a Partner :(









also maybe look for a job.
