


FileManager into its own project
	put into its own project
		looks better
	BMP load (save ?)
	DirectoryContext
		give an Array of all Directorys
		give an Array of all Files
	Behaviour
		Exception vs Null
		for something like LoadPNG
			return null or throw Exception
		for something like LoadText
			allways throw ?
			since file not Existing can be checked
				make something to check Permissions
			what about any other error ?
			if for other reasons it cant load the file
				like RAM problems
		it would be nicest to set what to do
		for throwing, allways return something
		for non throwing, return NULL or equivalent, and have a Referance to return what the error was ?
		or just a ref to a bool to check weather NULL was returned from an error or normal Behaviour
	ToIStream
	ToOStream
	ToBitStream
		change BitStream to be a Base
		then have variants
			one gets a void Pointer and reads from that
			one gets a StringStream or something and reads from that
		this is all reading BitStream
		have a write BitStream
			dont really need that right now
			better call it IBitStream so I dont need to rename

wrapper for Exception
	lots of the Exceptions build a string and then return c_str() to that string





OBJ_Parser and Particle Simulator
also put into own projects
make it so all of that stuff can be put into the 42 repo
so it just has a simple makefile



unrelated:
	put the chrome extensions into a repo
	maybe give it a ui so the parts can be turned on and off
	stop doing it with a timer



IntelliSense Comments
	add comments to functions to explain what they do
	at least for the functions used in the Mains



organize
	Uniforms can be generalized to FloatN and IntN
	(and whatever other data types are needed in the future)
	but storing FloatN is vague
	so allow for all DataTypes to converted into these simples
	and then use those for simple Uniforms
	do the same for Attributes

	more comlex stuff can also be generalized to some degree
	like Ray3D and AxisBox3D both being made of 2 Point3D s
	but first do normal FloatN





WireFrame
	would be best as its own thing like PolyHedra
	so a full class probably just called WireFrame

Display Collection Thing Types
	PolyHedra, OBJ and the theoretical WireFrame
	they do similar things
	a Collection of Data that
	that is then used as Main Data
	"DisplayObject"
Instance Data
	there is also Instance Data
	currently Simple3D and Physics3D
	I dont want them in the base Folder
	put them together with the DisplayObjects ?

	right now PH_3D is in PH
	but it should probably also be its own thing
	BufferArray and associated Shader

	EntryBuffer (currently PolyHedra_3D_Instances, dont like the name)
	also still havent made EntryBufferArray, not sure if i even need that one



optimize compilation
	foreward declaration
		<iosfwd> in header instead of <iostream>





MakeFile
currenly sucks
at home the Archives and Librarys are different
there is a way to make the MakeFile check those ?





there are also aparently a lot of things that openGL / glfw has already implemented
something about light, maybe projection stuff

but creating things myself gives me more freedom ?
	like with Depth, I like to use Relative Distance instead of DepthFactors
	since that means the same Depth when Spining
	although that might also be doable with Factors
	or at least outside the Fragment Shader





also maybe start working on the Projects
loading .obj should be simple compared to the .ymt I've already done

openCL dosent currently work because of the Links (on Mac)
but besides that I already have ComputeShaders and Instances
so that that done as well

Voxel I also already have but that Project needs a Partner :(









also maybe look for a job.
